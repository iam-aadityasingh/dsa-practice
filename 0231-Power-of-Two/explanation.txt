Problem: [231. Power of Two](https://leetcode.com/problems/power-of-two/)

---

Description:
Given an integer n, return true if it is a power of two. Otherwise, return false.

An integer n is a power of two if there exists an integer x such that n == 2^x.

---

Approach:
- If n <= 0, immediately return False (no negative or zero powers).
- If n == 1, return True (because 2^0 = 1).
- Initialize ans = 2 (which is 2^1).
- Loop:
    - While ans < n:
        - Multiply ans by 2 (ans *= 2).
    - After the loop ends:
        - If ans == n, then n is a power of two → return True.
        - Otherwise → return False.

---

Time Complexity:
- O(log n)
Because each multiplication roughly doubles ans, so number of steps is proportional to log₂(n).

Space Complexity:
- O(1)
We only use a constant number of variables.

---

Notes:
- An even faster solution exists using bitwise operations.
- However, for most cases, O(log n) using multiplication is perfectly acceptable.

# Problem Link:
https://leetcode.com/problems/fibonacci-number/

# Problem Description:
The Fibonacci numbers, commonly denoted F(n), form a sequence such that each number is the sum of the two preceding ones, starting from 0 and 1. That is:
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given n, return the nth Fibonacci number.

# Approach:
1. If n == 0, return 0 directly (edge case).
2. Initialize a list `fib_list` with base values: [0, 1], which are F(0) and F(1).
3. Use a for loop from i = 2 to n (inclusive):
   - At each step, calculate the next Fibonacci number using the formula:
     fib_list[i] = fib_list[i-1] + fib_list[i-2]
   - Append it to the list.
4. After the loop, `fib_list[n]` will contain the nth Fibonacci number.
5. Return `fib_list[n]`.

# Time Complexity:
O(n), since we compute Fibonacci values up to n once.

# Space Complexity:
O(n), due to storing the full Fibonacci sequence up to n in a list.

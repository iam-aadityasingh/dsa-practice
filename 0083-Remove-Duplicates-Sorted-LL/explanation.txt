# Problem Link:
https://leetcode.com/problems/remove-duplicates-from-sorted-list/

# Problem Description:
Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

# Approach:
1. Initialize a pointer `current` at the head of the list.
2. Traverse the list while `current` and `current.next` are not null.
3. If the value of the current node is equal to the next node, skip the duplicate node by updating `current.next = current.next.next`.
4. If not a duplicate, simply move the `current` pointer forward.
5. This ensures only one pass through the list and no extra space is used.

# Time Complexity:
O(n), where n is the number of nodes in the linked list.

# Space Complexity:
O(1), since the solution uses only constant extra space.
